<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.SqlServer.Replication.BusinessLogicSupport</name>
  </assembly>
  <members>
    <member name="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.ActionOnDataChange">
      <summary>Enumerates all actions that can be taken when handling data changes that do not result in a conflict.</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Replication.BusinessLogicSupport.ActionOnDataChange.AcceptCustomData">
      <summary>The data change is overridden by custom user data provided by the business logic handler. The custom user data is then propagated by the replication process.</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Replication.BusinessLogicSupport.ActionOnDataChange.AcceptData">
      <summary>The data change is accepted and propagated by the replication process as usual.</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Replication.BusinessLogicSupport.ActionOnDataChange.RejectData">
      <summary>The data change is rejected and not propagated by the replication process.</summary>
    </member>
    <member name="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.ActionOnDataDelete">
      <summary>Enumerates all actions that can be taken when replicating DELETE statements that do not result in a conflict.</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Replication.BusinessLogicSupport.ActionOnDataDelete.AcceptDelete">
      <summary>The delete is accepted and propagated by the replication process as usual.</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Replication.BusinessLogicSupport.ActionOnDataDelete.ConvertDeleteToUpdate">
      <summary>The delete is rejected, and the change row should be updated on the destination so that it becomes an insert on the source of the original delete.</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Replication.BusinessLogicSupport.ActionOnDataDelete.RejectDelete">
      <summary>The delete is rejected and not propagated by the replication process.</summary>
    </member>
    <member name="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.ActionOnDataError">
      <summary>Enumerates all actions that can be taken when handling data errors.</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Replication.BusinessLogicSupport.ActionOnDataError.AcceptCustomErrorBehavior">
      <summary>The error is handled using custom user functionality provided by the business logic handler. The custom functionality is then propagated by the replication process.</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Replication.BusinessLogicSupport.ActionOnDataError.AcceptDefaultErrorBehavior">
      <summary>The error is handled by replication using default error behaviors.</summary>
    </member>
    <member name="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.ActionOnUpdateConflict">
      <summary>Enumerates all actions that can be taken when handling conflicting UPDATE statements.</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Replication.BusinessLogicSupport.ActionOnUpdateConflict.AcceptCustomConflictData">
      <summary>The conflict is resolved using custom user data provided by the business logic handler. The custom data is then propagated by the replication process.</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Replication.BusinessLogicSupport.ActionOnUpdateConflict.AcceptDefaultResolution">
      <summary>The conflict is resolved using the default resolution rules.</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Replication.BusinessLogicSupport.ActionOnUpdateConflict.AcceptPublisherData">
      <summary>The conflict is resolved by accepting the update from the Publisher as the winning update.</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Replication.BusinessLogicSupport.ActionOnUpdateConflict.AcceptSubscriberData">
      <summary>The conflict is resolved by accepting the update from the Subscriber as the winning update.</summary>
    </member>
    <member name="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.ActionOnUpdateDeleteConflict">
      <summary>Enumerates all actions that can be taken when handling an UPDATE statement that conflicts with a DELETE statement.</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Replication.BusinessLogicSupport.ActionOnUpdateDeleteConflict.AcceptCustomData">
      <summary>The conflict is resolved using custom user data provided by the business logic handler. The custom user data is then propagated by the replication process.</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Replication.BusinessLogicSupport.ActionOnUpdateDeleteConflict.AcceptDefaultResolution">
      <summary>The conflict is resolved using the default resolution rules</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Replication.BusinessLogicSupport.ActionOnUpdateDeleteConflict.AcceptDelete">
      <summary>The conflict is resolved by accepting the delete as the winner.</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Replication.BusinessLogicSupport.ActionOnUpdateDeleteConflict.AcceptUpdate">
      <summary>The conflict is resolved by accepting the update as the winner.</summary>
    </member>
    <member name="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicCommand">
      <summary>Represents a business logic command.</summary>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicCommand.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicCommand" /> class.</summary>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicCommand.#ctor(Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicConnection)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicCommand" /> class.</summary>
      <param name="connection">The connection.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicCommand.#ctor(Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicConnection,Microsoft.SqlServer.Replication.BusinessLogicSupport.TempDBResultSet)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicCommand" /> class.</summary>
      <param name="connection">The connection.</param>
      <param name="resultSet">The result set.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicCommand.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicCommand" /> class.</summary>
      <param name="cmdText">The command text.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicCommand.#ctor(System.String,Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicConnection,Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicTransaction)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicCommand" /> class.</summary>
      <param name="cmdText">The command text.</param>
      <param name="connection">The connection.</param>
      <param name="transaction">The transaction.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicCommand.Cancel">
      <summary>Cancels the execution of a <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicCommand" />.</summary>
    </member>
    <member name="P:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicCommand.CommandText">
      <summary>Gets or sets the text command to run against the data source.</summary>
      <returns>The text command.</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicCommand.CommandTimeout">
      <summary>Gets or sets the time in seconds to wait for the command to execute.</summary>
      <returns>The time in seconds to wait for the command to execute.</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicCommand.CommandType">
      <summary>Gets or sets the command type.</summary>
      <returns>The command type.</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicCommand.Connection">
      <summary>Gets or sets the connection to the data source.</summary>
      <returns>The connection to the data source.</returns>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicCommand.CreateParameter">
      <summary>Creates a new instance of an <see cref="T:System.Data.IDbDataParameter" /> object.</summary>
      <returns>The newly created parameter.</returns>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicCommand.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicCommand" />.</summary>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicCommand.ExecuteNonQuery">
      <summary>Executes a statement against a connection object.</summary>
      <returns>The number of rows affected.</returns>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicCommand.ExecuteReader">
      <summary>Executes the <see cref="P:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicCommand.CommandText" /> against the <see cref="P:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicCommand.Connection" />, and returns an <see cref="T:System.Data.IDataReader" />.</summary>
      <returns>A data reader.</returns>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicCommand.ExecuteReader(System.Data.CommandBehavior)">
      <summary>Executes the <see cref="P:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicCommand.CommandText" /> against the <see cref="P:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicCommand.Connection" />, and returns an <see cref="T:System.Data.IDataReader" /> using one of the <see cref="T:System.Data.CommandBehavior" />.</summary>
      <returns>A data reader.</returns>
      <param name="behavior">The behavior.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicCommand.ExecuteScalar">
      <summary>Executes the query and returns the first column of the first row in the result set returned by the query.</summary>
      <returns>The first column of the first row in the result set.</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicCommand.Parameters">
      <summary>Gets the collection of business logic parameters.</summary>
      <returns>The collection of business logic parameters.</returns>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicCommand.Prepare">
      <summary>Creates a prepared version of the command on the data source.</summary>
    </member>
    <member name="P:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicCommand.System#Data#IDbCommand#Parameters">
      <summary>Gets the <see cref="T:System.Data.IDataParameterCollection" />.</summary>
      <returns>The collection of parameters.</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicCommand.Transaction">
      <summary>Gets or sets the transaction within which the command executes.</summary>
      <returns>The transaction within which the command executes.</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicCommand.UpdatedRowSource">
      <summary>Gets or sets the updated row source.</summary>
      <returns>The updated row source.</returns>
    </member>
    <member name="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicConnection">
      <summary>Represents a business logic connection.</summary>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicConnection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicConnection" /> class.</summary>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicConnection.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicConnection" /> class.</summary>
      <param name="connectionString">A connection string.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicConnection.BeginTransaction">
      <summary>Starts a database transaction.</summary>
      <returns>An object representing the new transaction.</returns>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicConnection.BeginTransaction(System.Data.IsolationLevel)">
      <summary>Starts a database transaction with the specified isolation level.</summary>
      <returns>An object representing the new transaction.</returns>
      <param name="level">The isolation level for the transaction.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicConnection.ChangeDatabase(System.String)">
      <summary>Changes the current database for an open connection.</summary>
      <param name="dbName">The name of the database for the connection to use.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicConnection.Close">
      <summary>Closes the connection to the database.</summary>
    </member>
    <member name="P:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicConnection.ConnectionString">
      <summary>Gets or sets the string used to open the connection.</summary>
      <returns>The string used to open the connection.</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicConnection.ConnectionTimeout">
      <summary>Gets the time to wait for a connection to open.</summary>
      <returns>The time to wait for a connection to open.</returns>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicConnection.CreateCommand">
      <summary>Creates and returns an <see cref="T:System.Data.IDbCommand" /> object associated with the current connection.</summary>
      <returns>The newly created command.</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicConnection.Database">
      <summary>Gets the name of the current database after a connection is opened.</summary>
      <returns>The name of the current database after a connection is opened.</returns>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicConnection.Dispose">
      <summary>Releases all resources used by the <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicConnection" />.</summary>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicConnection.Open">
      <summary>Opens a database connection with the settings specified by the <see cref="P:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicConnection.ConnectionString" />.</summary>
    </member>
    <member name="P:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicConnection.State">
      <summary>Gets a string that describes the state of the connection.</summary>
      <returns>The state of the connection.</returns>
    </member>
    <member name="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataAdapter">
      <summary>Represents the business logic data adapter.</summary>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataAdapter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataAdapter" /> class.</summary>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Common.RowUpdatedEventArgs" /> class.</summary>
      <returns>A new instance of the <see cref="T:System.Data.Common.RowUpdatedEventArgs" /> class.</returns>
      <param name="dataRow">Used to update the data source.</param>
      <param name="command">The <see cref="T:System.Data.IDbCommand" /> executed during the update.</param>
      <param name="statementType">Whether the command is an UPDATE, INSERT, DELETE, or SELECT statement.</param>
      <param name="tableMapping">A <see cref="T:System.Data.Common.DataTableMapping" /> object.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Common.RowUpdatingEventArgs" /> class.</summary>
      <returns>A new instance of the <see cref="T:System.Data.Common.RowUpdatingEventArgs" /> class.</returns>
      <param name="dataRow">The <see cref="T:System.Data.DataRow" /> that updates the data source.</param>
      <param name="command">The <see cref="T:System.Data.IDbCommand" /> to execute during the update.</param>
      <param name="statementType">Whether the command is an UPDATE, INSERT, DELETE, or SELECT statement.</param>
      <param name="tableMapping">A <see cref="T:System.Data.Common.DataTableMapping" /> object.</param>
    </member>
    <member name="P:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataAdapter.DeleteCommand">
      <summary>Gets or sets a stored procedure for deleting records from the data set.</summary>
      <returns>A <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicCommand" /> used to delete records.</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataAdapter.InsertCommand">
      <summary>Gets or sets a stored procedure used to insert records from the data source.</summary>
      <returns>A <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicCommand" /> used to insert records.</returns>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)">
      <summary>Raises the RowUpdated event.</summary>
      <param name="value">Contains the event data.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)">
      <summary>Raises the RowUpdating event.</summary>
      <param name="value">Contains the event data.</param>
    </member>
    <member name="E:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataAdapter.RowUpdated">
      <summary>Occurs during update after a command is executed against the data source.</summary>
    </member>
    <member name="E:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataAdapter.RowUpdating">
      <summary>Occurs during update before a command is executed against the data source.</summary>
    </member>
    <member name="P:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataAdapter.SelectCommand">
      <summary>Gets or sets a stored procedure used to select records from the data set.</summary>
      <returns>Returns <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicCommand" />.</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataAdapter.System#Data#IDbDataAdapter#DeleteCommand">
      <summary>Gets or sets a stored procedure for deleting records from the data set.</summary>
      <returns>A command used to delete records.</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataAdapter.System#Data#IDbDataAdapter#InsertCommand">
      <summary>Gets or sets a stored procedure used to insert records from the data source.</summary>
      <returns>A command used to insert records.</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataAdapter.System#Data#IDbDataAdapter#SelectCommand">
      <summary>Gets or sets a stored procedure used to select records from the data set.</summary>
      <returns>A command used to select records.</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataAdapter.System#Data#IDbDataAdapter#UpdateCommand">
      <summary>Gets or sets a stored procedure used to update records from the data source.</summary>
      <returns>A command used to update records.</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataAdapter.UpdateCommand">
      <summary>Gets or sets a stored procedure used to update records from the data source.</summary>
      <returns>A <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicCommand" /> used to update records.</returns>
    </member>
    <member name="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataReader">
      <summary>Represents a business logic data reader.</summary>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataReader.#ctor(Microsoft.SqlServer.Replication.BusinessLogicSupport.TempDBResultSet)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataReader" /> class.</summary>
      <param name="resultSet">The result set.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataReader.Close">
      <summary>Closes the <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataReader" /> object.</summary>
    </member>
    <member name="P:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataReader.Depth">
      <summary>Gets a value indicating the depth of nesting for the current row.</summary>
      <returns>The depth of nesting for the current row.</returns>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataReader.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataReader" />class.</summary>
    </member>
    <member name="P:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataReader.FieldCount">
      <summary>Gets the number of columns in the current row.</summary>
      <returns>The number of columns in the current row.</returns>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataReader.GetBoolean(System.Int32)">
      <summary>Gets the value of the specified column as a Boolean.</summary>
      <returns>The value of the specified column.</returns>
      <param name="i">The zero-based column ordinal.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataReader.GetByte(System.Int32)">
      <summary>Gets the value of the specified column as a byte.</summary>
      <returns>The value of the specified column.</returns>
      <param name="i">The zero-based column ordinal.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>Reads a stream of bytes from the specified column.</summary>
      <returns>The actual number of bytes read.</returns>
      <param name="i">The zero-based column ordinal.</param>
      <param name="fieldOffset">The index within the row from which to begin the read operation.</param>
      <param name="buffer">The buffer into which to copy the data.</param>
      <param name="bufferoffset">The index with the buffer to which the data will be copied.</param>
      <param name="length">The maximum number of characters to read.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataReader.GetChar(System.Int32)">
      <summary>Gets the value of the specified column as a single character.</summary>
      <returns>The value of the specified column.</returns>
      <param name="i">The zero-based column ordinal.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>Reads a stream of characters from the specified column.</summary>
      <returns>The actual number of characters read.</returns>
      <param name="i">The zero-based column ordinal.</param>
      <param name="fieldoffset">The index within the row from which to begin the read operation.</param>
      <param name="buffer">The buffer into which to copy the data.</param>
      <param name="bufferoffset">The index with the buffer to which the data will be copied.</param>
      <param name="length">The maximum number of characters to read.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataReader.GetData(System.Int32)">
      <summary>Reads a <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataReader" /> for the requested column ordinal.</summary>
      <returns>A <see cref="T:System.Data.IDataReader" /> object.</returns>
      <param name="i">The zero-based column ordinal.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataReader.GetDataTypeName(System.Int32)">
      <summary>Gets name of the data type of the specified column.</summary>
      <returns>A string representing the name of the data type.</returns>
      <param name="i">The zero-based column ordinal.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataReader.GetDateTime(System.Int32)">
      <summary>Gets the value of the specified column as a <see cref="T:System.DateTime" /> object.</summary>
      <returns>The value of the specified column.</returns>
      <param name="i">The zero-based column ordinal.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataReader.GetDecimal(System.Int32)">
      <summary>Gets the value of the specified column as a <see cref="T:System.Decimal" /> object.</summary>
      <returns>The value of the specified column.</returns>
      <param name="i">The zero-based column ordinal.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataReader.GetDouble(System.Int32)">
      <summary>Gets the value of the specified column as a double-precision floating point number.</summary>
      <returns>The value of the specified column.</returns>
      <param name="i">The zero-based column ordinal.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataReader.GetFieldType(System.Int32)">
      <summary>Gets the data type of the specified column.</summary>
      <returns>The data type of the specified column.</returns>
      <param name="i">The zero-based column ordinal.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataReader.GetFloat(System.Int32)">
      <summary>Gets the value of the specified column as a single-precision floating point number.</summary>
      <returns>The value of the specified column.</returns>
      <param name="i">The zero-based column ordinal.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataReader.GetGuid(System.Int32)">
      <summary>Gets the value of the specified column as a globally-unique identifier (GUID).</summary>
      <returns>The value of the specified column.</returns>
      <param name="i">The zero-based column ordinal.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataReader.GetInt16(System.Int32)">
      <summary>Gets the value of the specified column as a 16-bit signed integer.</summary>
      <returns>The value of the specified column.</returns>
      <param name="i">The zero-based column ordinal.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataReader.GetInt32(System.Int32)">
      <summary>Gets the value of the specified column as a 32-bit signed integer.</summary>
      <returns>The value of the specified column.</returns>
      <param name="i">The zero-based column ordinal.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataReader.GetInt64(System.Int32)">
      <summary>Gets the value of the specified column as a 64-bit signed integer.</summary>
      <returns>The value of the specified column.</returns>
      <param name="i">The zero-based column ordinal.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataReader.GetName(System.Int32)">
      <summary>Gets the name of the column.</summary>
      <returns>The name of the specified column.</returns>
      <param name="i">The zero-based column ordinal.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataReader.GetOrdinal(System.String)">
      <summary>Gets the column ordinal given the name of the column.</summary>
      <returns>The zero-based column ordinal.</returns>
      <param name="name">The name of the column.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataReader.GetSchemaTable">
      <summary>Returns a <see cref="T:System.Data.DataTable" /> that describes the column metadata.</summary>
      <returns>A <see cref="T:System.Data.DataTable" /> that describes the column metadata.</returns>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataReader.GetString(System.Int32)">
      <summary>Gets the value of the specified column as an instance of <see cref="T:System.String" />.</summary>
      <returns>The value of the specified column.</returns>
      <param name="i">The zero-based column ordinal.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataReader.GetValue(System.Int32)">
      <summary>Gets the value of the specified column as an instance of <see cref="T:System.Object" />.</summary>
      <returns>The value of the specified column.</returns>
      <param name="i">The zero-based column ordinal.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataReader.GetValues(System.Object[])">
      <summary>Populates an array of objects with the column values of the current row.</summary>
      <returns>The number of instances of <see cref="T:System.Object" /> in the array.</returns>
      <param name="values">An array of <see cref="T:System.Object[]" /> into which to copy the attribute columns.</param>
    </member>
    <member name="P:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataReader.IsClosed">
      <summary>Gets a value that indicates whether the <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataReader" /> is closed.</summary>
      <returns>true if the <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataReader" /> is closed; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataReader.IsDBNull(System.Int32)">
      <summary>Indicates whether the column contains nonexistent or missing values.</summary>
      <returns>true if the specified column is equivalent to DBNull; otherwise false.</returns>
      <param name="i">The zero-based column ordinal.</param>
    </member>
    <member name="P:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataReader.Item(System.Int32)">
      <summary>Gets the value of the specified column.</summary>
      <returns>The value of the specified column.</returns>
      <param name="i">The column.</param>
    </member>
    <member name="P:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataReader.Item(System.String)">
      <summary>Gets the value of the specified column.</summary>
      <returns>The value of the specified column.</returns>
      <param name="name">The name of the column.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataReader.NextResult">
      <summary>Advances the reader to the next result when reading the results of a batch of statements.</summary>
      <returns>true if there are more result sets; otherwise false.</returns>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataReader.Read">
      <summary>Advances the reader to the next record in a result set.</summary>
      <returns>true if there are more rows; otherwise false.</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicDataReader.RecordsAffected">
      <summary>Gets the number of rows changed, inserted, or deleted by execution of the statement.</summary>
      <returns>The number of rows changed, inserted, or deleted by execution of the statement.</returns>
    </member>
    <member name="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicModule">
      <summary>Implements the custom business logic that is invoked during the merge replication synchronization process. </summary>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicModule.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicModule.CommitHandler(Microsoft.SqlServer.Replication.BusinessLogicSupport.SourceIdentifier,System.Guid)">
      <summary>Optional method implements the custom business logic that is invoked when a data change is committed during synchronization. </summary>
      <param name="source">
        <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.SourceIdentifier" /> that indicates whether the source of the change is the Publisher or the Subscriber.</param>
      <param name="rowGuid">GUID of the row that was committed.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicModule.DeleteErrorHandler(Microsoft.SqlServer.Replication.BusinessLogicSupport.SourceIdentifier,System.Data.DataSet,Microsoft.SqlServer.Replication.BusinessLogicSupport.ErrorLogType@,System.String@,System.Int32,System.String,System.Int32@,System.String@)">
      <summary>Optional method that implements the custom business logic invoked when an error occurs at the time a DELETE statement is being uploaded or downloaded. </summary>
      <returns>The <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.ActionOnDataError" /> action that will be taken by the process after the custom business logic handler has executed.</returns>
      <param name="deleteSource">
        <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.SourceIdentifier" /> that indicates whether the source of the delete that generated the error is the Publisher or the Subscriber.</param>
      <param name="deletedDataSet">Dataset that contains the GUID of the row that was deleted. </param>
      <param name="errorLogType">
        <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.ErrorLogType" /> output parameter that controls how replication logs the error. This parameter is used only if the return value is <see cref="F:Microsoft.SqlServer.Replication.BusinessLogicSupport.ActionOnDataError.AcceptCustomErrorBehavior" />. </param>
      <param name="customErrorMessage">Output parameter used to return a custom error message. This parameter is used only if the return value is <see cref="F:Microsoft.SqlServer.Replication.BusinessLogicSupport.ActionOnDataError.AcceptCustomErrorBehavior" />. </param>
      <param name="errorCode">Error code that corresponds to the underlying replication error that occurred. </param>
      <param name="errorMessage">Error message text that corresponds to the underlying replication error that occurred.</param>
      <param name="historyLogLevel">Log level of the custom message returned by the custom business logic handler.</param>
      <param name="historyLogMessage">Log message provided by the custom business logic handler. The log message gets written to the distribution database.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicModule.DeleteHandler(Microsoft.SqlServer.Replication.BusinessLogicSupport.SourceIdentifier,System.Data.DataSet,System.Int32@,System.String@)">
      <summary>Optional method that implements the custom business logic invoked when DELETE statements are being uploaded or downloaded. </summary>
      <returns>The <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.ActionOnDataDelete" /> action that will be taken by the process after the custom business logic has executed.</returns>
      <param name="deleteSource">Specifies whether the delete is initiated at the Publisher or at the Subscriber.</param>
      <param name="deletedDataSet">Dataset containing the GUID of the row that was deleted. </param>
      <param name="historyLogLevel">Log level of the custom message returned by the custom business logic.</param>
      <param name="historyLogMessage">Log message provided by the custom business logic. The log message gets written to the distribution database.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicModule.Dispose">
      <summary>Disposes of all used resources. This method is invoked after all the custom business logic has been executed.</summary>
    </member>
    <member name="P:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicModule.HandledChangeStates">
      <summary>Required property that returns information on the types of changes handled by the business logic module. </summary>
      <returns>
        <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.ChangeStates" /> that enumerates the types of changes handled by the business logic module.</returns>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicModule.Initialize(System.String,System.String,System.String,System.String,System.String,System.String)">
      <summary>Sends information about the article being synchronized to the business logic resolver when the Merge Agent is started.</summary>
      <param name="publisher">Name of the Publisher.</param>
      <param name="subscriber">Name of the Subscriber.</param>
      <param name="distributor">Name of the Distributor.</param>
      <param name="publisherDB">Name of the publication database.</param>
      <param name="subscriberDB">Name of the subscription database.</param>
      <param name="articleName">Name of the published article.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicModule.InsertErrorHandler(Microsoft.SqlServer.Replication.BusinessLogicSupport.SourceIdentifier,System.Data.DataSet,Microsoft.SqlServer.Replication.BusinessLogicSupport.ErrorLogType@,System.String@,System.Int32,System.String,System.Int32@,System.String@)">
      <summary>Optional method implements the custom business logic invoked when an error occurs at the time an INSERT statement is being uploaded or downloaded. </summary>
      <returns>The <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.ActionOnDataError" /> action that will be taken by the process after the custom business logic handler has executed.</returns>
      <param name="insertSource">
        <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.SourceIdentifier" /> that indicates whether the source of the insert that generated the error is the Publisher or the Subscriber.</param>
      <param name="insertedDataSet">Dataset that contains the GUID of the row that was inserted. </param>
      <param name="errorLogType">
        <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.ErrorLogType" /> output parameter that controls how replication logs the error. This parameter is used only if the return value is <see cref="F:Microsoft.SqlServer.Replication.BusinessLogicSupport.ActionOnDataError.AcceptCustomErrorBehavior" />. </param>
      <param name="customErrorMessage">Output parameter used to return a custom error message. This parameter is only used if the return value is <see cref="F:Microsoft.SqlServer.Replication.BusinessLogicSupport.ActionOnDataError.AcceptCustomErrorBehavior" />.</param>
      <param name="errorCode">Error code that corresponds to the underlying replication error that occurred. </param>
      <param name="errorMessage">Error message text that corresponds to the underlying replication error that occurred.</param>
      <param name="historyLogLevel">Log level of the custom message returned by the custom business logic handler.</param>
      <param name="historyLogMessage">Log message provided by the custom business logic handler. The log message gets written to the distribution database.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicModule.InsertHandler(Microsoft.SqlServer.Replication.BusinessLogicSupport.SourceIdentifier,System.Data.DataSet,System.Data.DataSet@,System.Int32@,System.String@)">
      <summary>Optional method that implements the custom business logic invoked when INSERT statements are being uploaded or downloaded. </summary>
      <returns>The <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.ActionOnDataChange" /> action that will be taken by the process after the custom business logic has executed.</returns>
      <param name="insertSource">
        <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.SourceIdentifier" /> that defines whether the insert was initiated at the Publisher or the Subscriber.</param>
      <param name="insertedDataSet">Dataset that contains the GUID of the row that was inserted. </param>
      <param name="customDataSet">Dataset that contains the modified row returned by the custom business logic.</param>
      <param name="historyLogLevel">Log level of the custom message returned by the custom business logic.</param>
      <param name="historyLogMessage">Log message provided by the custom business logic. The log message gets written to the distribution database.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicModule.PhaseBegin(System.Boolean)">
      <summary>Optional method that indicates the beginning of an upload or download phase of the synchronization. </summary>
      <param name="download">Specifies whether the phase about to begin is an upload or download.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicModule.UpdateConflictsHandler(System.Data.DataSet,System.Data.DataSet,System.Data.DataSet@,Microsoft.SqlServer.Replication.BusinessLogicSupport.ConflictLogType@,System.String@,System.Int32@,System.String@)">
      <summary>Optional method that implements the custom business logic invoked when conflicting UPDATE statements occur at the Publisher and at the Subscriber. </summary>
      <returns>The <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.ActionOnUpdateConflict" /> action that will be taken by the process after the custom business logic handler has executed.</returns>
      <param name="publisherDataSet">Dataset representing the Publisher data.</param>
      <param name="subscriberDataSet">Dataset representing the Subscriber data.</param>
      <param name="customDataSet">Dataset implemented by the custom business logic.</param>
      <param name="conflictLogType">
        <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.ConflictLogType" /> requested by the custom business logic handler.</param>
      <param name="customConflictMessage">Conflict message returned by the custom business logic handler.</param>
      <param name="historyLogLevel">Log level of the custom message returned by the custom business logic handler.</param>
      <param name="historyLogMessage">Log message provided by custom business logic handler. The log message gets written to the distribution database.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicModule.UpdateDeleteConflictHandler(Microsoft.SqlServer.Replication.BusinessLogicSupport.SourceIdentifier,System.Data.DataSet,System.Data.DataSet@,Microsoft.SqlServer.Replication.BusinessLogicSupport.ConflictLogType@,System.String@,System.Int32@,System.String@)">
      <summary>Optional method that implements the custom business logic invoked when UPDATE statements conflict with DELETE statements at the Publisher and at the Subscriber. </summary>
      <returns>The <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.ActionOnUpdateDeleteConflict" /> action that will be taken by the process after the custom business logic handler has executed.</returns>
      <param name="updateSource">Is the <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.SourceIdentifier" /> that indicates whether the source of the update is the Publisher or the Subscriber. </param>
      <param name="sourceDataSet">Dataset that contains the GUID representing the row in conflict.</param>
      <param name="customDataSet">Dataset implemented by the custom business logic.</param>
      <param name="conflictLogType">
        <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.ConflictLogType" /> requested by the custom business logic handler.</param>
      <param name="customConflictMessage">Conflict message returned by the custom business logic handler.</param>
      <param name="historyLogLevel">Log level of the custom message returned by the custom business logic handler.</param>
      <param name="historyLogMessage">Log message provided by custom business logic handler. The log message gets written to the distribution database.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicModule.UpdateErrorHandler(Microsoft.SqlServer.Replication.BusinessLogicSupport.SourceIdentifier,System.Data.DataSet,Microsoft.SqlServer.Replication.BusinessLogicSupport.ErrorLogType@,System.String@,System.Int32,System.String,System.Int32@,System.String@)">
      <summary>Optional method that implements the custom business logic invoked when an error occurs at the time an UPDATE statement is being uploaded or downloaded. </summary>
      <returns>The <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.ActionOnDataError" /> action that will be taken by the process after the custom business logic handler has executed.</returns>
      <param name="updateSource">
        <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.SourceIdentifier" /> that indicates whether the source of the update that generated the error is the Publisher or the Subscriber.</param>
      <param name="updatedDataSet">Dataset representing the UPDATE statement that caused the error. </param>
      <param name="errorLogType">
        <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.ErrorLogType" /> output parameter that controls how replication logs the error. This parameter is used only if the return value is <see cref="F:Microsoft.SqlServer.Replication.BusinessLogicSupport.ActionOnDataError.AcceptCustomErrorBehavior" />. </param>
      <param name="customErrorMessage">Output parameter used to return a custom error message. This parameter is used only if the return value is <see cref="F:Microsoft.SqlServer.Replication.BusinessLogicSupport.ActionOnDataError.AcceptCustomErrorBehavior" />.</param>
      <param name="errorCode">Error code that corresponds to the underlying replication error that occurred. </param>
      <param name="errorMessage">Error message text that corresponds to the underlying replication error that occurred.</param>
      <param name="historyLogLevel">Log level of the custom message returned by the custom business logic handler.</param>
      <param name="historyLogMessage">Log message provided by custom business logic handler. The log message gets written to the distribution database.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicModule.UpdateHandler(Microsoft.SqlServer.Replication.BusinessLogicSupport.SourceIdentifier,System.Data.DataSet,System.Data.DataSet@,System.Int32@,System.String@)">
      <summary>Optional method that implements the custom business logic invoked when UPDATE statements are being uploaded or downloaded. </summary>
      <returns>The <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.ActionOnDataChange" /> action that will be taken by the process after the custom business logic has executed.</returns>
      <param name="updateSource">Specifies whether the update was initiated at the Publisher or at the Subscriber.</param>
      <param name="updatedDataSet">Dataset representing the data being updated.</param>
      <param name="customDataSet">Dataset implemented by the custom business logic.</param>
      <param name="historyLogLevel">Log level of the custom message returned by the custom business logic.</param>
      <param name="historyLogMessage">Log message provided by custom business logic. The log message gets written to the distribution database.</param>
    </member>
    <member name="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicParameter">
      <summary>Represents a business logic parameter.</summary>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicParameter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicParameter" /> class.</summary>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicParameter.#ctor(System.String,System.Data.DbType)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicParameter" /> class with a specified type and name of the parameter.</summary>
      <param name="parameterName">The parameter name.</param>
      <param name="type">The type of the parameter.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicParameter.#ctor(System.String,System.Data.DbType,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicParameter" /> class.</summary>
      <param name="parameterName">The parameter name.</param>
      <param name="dbType">The database type.</param>
      <param name="sourceColumn">The source column.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicParameter.#ctor(System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicParameter" /> class.</summary>
      <param name="parameterName">The parameter name.</param>
      <param name="value">The value of the parameter.</param>
    </member>
    <member name="P:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicParameter.DbType">
      <summary>Gets or sets the <see cref="T:System.Data.DbType" /> of the parameter.</summary>
      <returns>One of the <see cref="T:System.Data.DbType" /> values.</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicParameter.Direction">
      <summary>Gets or sets a value that indicates whether the parameter is input-only, output-only, bidirectional, or a stored procedure return value parameter.</summary>
      <returns>One of the <see cref="T:System.Data.ParameterDirection" /> values.</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicParameter.IsNullable">
      <summary>Gets a value that indicates whether the parameter accepts null values.</summary>
      <returns>true if null values are accepted; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicParameter.ParameterName">
      <summary>Gets or sets the name of the <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicParameter" />.</summary>
      <returns>The name of the <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicParameter" />.</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicParameter.SourceColumn">
      <summary>Gets or sets the name of the source column mapped to the data set.</summary>
      <returns>The name of the source column mapped to the data set.</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicParameter.SourceVersion">
      <summary>Gets or sets the <see cref="T:System.Data.DataRowVersion" /> to use when you load value.</summary>
      <returns>One of the <see cref="T:System.Data.DataRowVersion" /> values.</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicParameter.Value">
      <summary>Gets or sets the value of the parameter.</summary>
      <returns>An <see cref="T:System.Object" /> that is the value of the parameter.</returns>
    </member>
    <member name="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicParameterCollection">
      <summary>Represents a collection of business logic parameter.</summary>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicParameterCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicParameterCollection" /> class.</summary>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicParameterCollection.Add(Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicParameter)">
      <summary>Adds the specified parameter to the collection.</summary>
      <returns>The index of the parameter object in the collection.</returns>
      <param name="value">The value of the parameter to add.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicParameterCollection.Add(System.Object)">
      <summary>Adds the specified parameter to the collection.</summary>
      <returns>The index of the parameter object in the collection.</returns>
      <param name="value">The value of the parameter to add.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicParameterCollection.Add(System.String,System.Data.DbType)">
      <summary>Adds the specified parameter to the collection.</summary>
      <returns>The index of the parameter object in the collection.</returns>
      <param name="parameterName">The name of the parameter.</param>
      <param name="type">The type of the database.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicParameterCollection.Add(System.String,System.Data.DbType,System.String)">
      <summary>Adds the specified parameter to the collection.</summary>
      <returns>The index of the parameter object in the collection.</returns>
      <param name="parameterName">The name of the parameter.</param>
      <param name="dbType">The type of the database.</param>
      <param name="sourceColumn">The source column where to add the parameter.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicParameterCollection.Add(System.String,System.Object)">
      <summary>Adds the specified parameter to the collection.</summary>
      <returns>The index of the parameter object in the collection.</returns>
      <param name="parameterName">The name of the parameter.</param>
      <param name="value">The value of the parameter.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicParameterCollection.Contains(System.String)">
      <summary>Indicates whether the parameter with the specified name exists in the collection.</summary>
      <returns>true if the parameter is in the collection; otherwise, false.</returns>
      <param name="parameterName">The name of the parameter.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicParameterCollection.CopyTo(Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicParameterCollection,System.Int32)">
      <summary>Copies a <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicParameterCollection" /> starting at the specified index.</summary>
      <param name="businessLogicParameterCollection">A <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicParameterCollection" /> object.</param>
      <param name="index">The index in the collection to copy the items.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicParameterCollection.IndexOf(System.String)">
      <summary>Returns the index of the parameter object with the specified name.</summary>
      <returns>The index of the parameter object with the specified name.</returns>
      <param name="parameterName">The name of the parameter.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicParameterCollection.Insert(System.Int32,Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicParameterCollection)">
      <summary>Inserts the specified index of the parameter object with the specified name into the collection at the specified index</summary>
      <param name="index">The index at which to insert the parameter object.</param>
      <param name="value">The parameter object to insert into the collection.</param>
    </member>
    <member name="P:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicParameterCollection.Item(System.String)">
      <summary>Gets or sets the parameter collection at the specified index.</summary>
      <returns>The parameter collection at the specified index.</returns>
      <param name="index">The index.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicParameterCollection.Remove(Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicParameterCollection)">
      <summary>Removes the parameter object from the collection.</summary>
      <param name="value">The value of the parameter object to remove.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicParameterCollection.RemoveAt(System.String)">
      <summary>Removes the parameter object with the specified name from the collection.</summary>
      <param name="parameterName">The name of the parameter object to remove.</param>
    </member>
    <member name="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicResolver">
      <summary>Represents a business logic resolver.</summary>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicResolver.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicResolver" /> class.</summary>
      <param name="clrAssemblyName">The clr assembly name.</param>
      <param name="clrClassName">The clr class name.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicResolver.Dispose">
      <summary>Releases the resources used by the <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicResolver" /> class.</summary>
    </member>
    <member name="P:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicResolver.HandledChangeStates">
      <summary>Gets the information on the types of changes handled by the <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicResolver" />.</summary>
      <returns>A <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.ChangeStates" /> that enumerates the types of changes handled by the <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicResolver" />.</returns>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicResolver.InvokeChangeHandler(Microsoft.SqlServer.Replication.BusinessLogicSupport.ChangeStates,System.String,Microsoft.SqlServer.Replication.BusinessLogicSupport.SourceIdentifier,System.Data.DataSet,System.Data.DataSet@,System.Int32@,System.String@)">
      <summary>Invokes a handler when changes to the method are detected.</summary>
      <returns>The <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.ActionOnDataChange" /> action that will be taken by the process after the business logic handler has executed.</returns>
      <param name="currentChangeState">The current change state.</param>
      <param name="methodName">The method name.</param>
      <param name="sourceIdentifier">The source identifier.</param>
      <param name="sourceDataSet">The source data set.</param>
      <param name="customDataSet">The custom data set.</param>
      <param name="logLevel">The log level.</param>
      <param name="logMessage">The log message.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicResolver.InvokeCommitHandler(Microsoft.SqlServer.Replication.BusinessLogicSupport.SourceIdentifier,System.Guid)">
      <summary>Invokes a handler when a data change is committed during synchronization.</summary>
      <param name="sourceIdentifier">The source identifier.</param>
      <param name="rowGuid">The row GUID that was committed.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicResolver.InvokeDeleteHandler(Microsoft.SqlServer.Replication.BusinessLogicSupport.ChangeStates,System.String,Microsoft.SqlServer.Replication.BusinessLogicSupport.SourceIdentifier,System.Data.DataSet,System.Int32@,System.String@)">
      <summary>Invokes a handler when DELETE statements are being uploaded or downloaded.</summary>
      <returns>The <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.ActionOnDataDelete" /> that will be taken by the process after the custom business logic has executed.</returns>
      <param name="currentChangeState">The current change state.</param>
      <param name="methodName">The method name.</param>
      <param name="sourceIdentifier">The source identifier.</param>
      <param name="sourceDataSet">The source data set.</param>
      <param name="logLevel">The log level</param>
      <param name="logMessage">The log message.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicResolver.InvokeErrorHandler(Microsoft.SqlServer.Replication.BusinessLogicSupport.ChangeStates,System.String,Microsoft.SqlServer.Replication.BusinessLogicSupport.SourceIdentifier,System.Data.DataSet,Microsoft.SqlServer.Replication.BusinessLogicSupport.ErrorLogType@,System.String@,System.Int32,System.String,System.Int32@,System.String@)">
      <summary>Invokes a handler when error occurs during execution.</summary>
      <returns>The <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.ActionOnDataError" /> action that will be taken by the process after the business logic handler has executed.</returns>
      <param name="currentChangeState">The current change state.</param>
      <param name="methodName">The method name.</param>
      <param name="sourceIdentifier">The source identifier.</param>
      <param name="sourceDataSet">The source data set.</param>
      <param name="logErrorType">Controls how replication logs the error.</param>
      <param name="errorLogMessage">The error log message.</param>
      <param name="errorCode">The error code.</param>
      <param name="errorMessage">The error message.</param>
      <param name="logLevel">The log level of the message returned by the business logic handler.</param>
      <param name="logMessage">The log message provided by the business logic handler.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicResolver.InvokeInitialize(System.String,System.String,System.String,System.String,System.String,System.String)">
      <summary>Invokes the initialization.</summary>
      <param name="publisher">The name of the publisher.</param>
      <param name="subscriber">The name of the subscriber.</param>
      <param name="distributor">The name of the distributor.</param>
      <param name="publisherDB">The name of the publication database.</param>
      <param name="subscriberDB">The name of the subscription database.</param>
      <param name="articleName">The name of the published article.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicResolver.InvokePhaseBegin(System.Boolean)">
      <summary>Invokes the beginning of an upload or download phase of the synchronization.</summary>
      <param name="download">Specifies whether the phase about to begin is an upload or download.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicResolver.InvokeUpdateConflictHandler(Microsoft.SqlServer.Replication.BusinessLogicSupport.ChangeStates,System.String,System.Data.DataSet,System.Data.DataSet,System.Data.DataSet@,Microsoft.SqlServer.Replication.BusinessLogicSupport.SourceIdentifier,Microsoft.SqlServer.Replication.BusinessLogicSupport.ConflictLogType@,System.String@,System.Int32@,System.String@)">
      <summary>Invokes the handler when conflicting UPDATE statements occur at the source and at the destination.</summary>
      <returns>The <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.ActionOnUpdateConflict" /> action that will be taken by the process after the custom business logic handler has executed.</returns>
      <param name="currentChangeState">Current change state.</param>
      <param name="methodName">The method name.</param>
      <param name="sourceDataSet">The source data set.</param>
      <param name="destinationDataSet">The destination data set.</param>
      <param name="customDataSet">Data set implemented by the custom business logic.</param>
      <param name="sourceIdentifier">The source identifier.</param>
      <param name="logConflictType">The log conflict type.</param>
      <param name="conflictLogMessage">The conflict log message.</param>
      <param name="logLevel">The log level</param>
      <param name="logMessage">The log message.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicResolver.InvokeUpdateDeleteConflictHandler(Microsoft.SqlServer.Replication.BusinessLogicSupport.ChangeStates,System.String,Microsoft.SqlServer.Replication.BusinessLogicSupport.SourceIdentifier,System.Data.DataSet,System.Data.DataSet,System.Data.DataSet@,System.Boolean,Microsoft.SqlServer.Replication.BusinessLogicSupport.ConflictLogType@,System.String@,System.Int32@,System.String@)">
      <summary>Invokes a handler when UPDATE statements conflict with DELETE statements at the source and at the destination.</summary>
      <returns>The <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.ActionOnUpdateDeleteConflict" /> action that will be taken by the process after the custom business logic handler has executed.</returns>
      <param name="currentChangeState">Current change state.</param>
      <param name="methodName">The method name.</param>
      <param name="updateSourceIdentifier">The update source identifier.</param>
      <param name="sourceDataSet">The source data set.</param>
      <param name="destinationDataSet">The destination data set.</param>
      <param name="customDataSet">Data set implemented by the custom business logic.</param>
      <param name="downloadPhase">Specifies whether the phase about to begin is an upload or download.</param>
      <param name="logConflictType">The log conflict type.</param>
      <param name="conflictLogMessage">The conflict log message.</param>
      <param name="logLevel">The log level</param>
      <param name="logMessage">The log message.</param>
    </member>
    <member name="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicRowUpdatedEventArgs">
      <summary>Represents a business logic row updated event arguments.</summary>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicRowUpdatedEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicRowUpdatedEventArgs" /> class.</summary>
      <param name="row">The row.</param>
      <param name="command">The database command.</param>
      <param name="statementType">The type of statement.</param>
      <param name="tableMapping">The data table mapping.</param>
    </member>
    <member name="P:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicRowUpdatedEventArgs.Command">
      <summary>Gets the command executed when update is called.</summary>
      <returns>The <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicCommand" /> executed when update is called.</returns>
    </member>
    <member name="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicRowUpdatedEventHandler">
      <summary>Represents the method that will handle a row updated event.</summary>
    </member>
    <member name="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicRowUpdatingEventArgs">
      <summary>Represents a business logic row updating event arguments.</summary>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicRowUpdatingEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicRowUpdatedEventArgs" /> class.</summary>
      <param name="row">The data row.</param>
      <param name="command">The database command.</param>
      <param name="statementType">The type of statement.</param>
      <param name="tableMapping">The data table mapping.</param>
    </member>
    <member name="P:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicRowUpdatingEventArgs.Command">
      <summary>Gets the command executed when update is called.</summary>
      <returns>The <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicCommand" /> executed when update is called.</returns>
    </member>
    <member name="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicRowUpdatingEventHandler">
      <summary>Represents the method that will handle a row updating event.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The event.</param>
    </member>
    <member name="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicTransaction">
      <summary>Represents a business logic transaction.</summary>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicTransaction.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicTransaction" /> class.</summary>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicTransaction.Commit">
      <summary>Commits the transaction.</summary>
    </member>
    <member name="P:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicTransaction.Connection">
      <summary>Gets the <see cref="T:System.Data.IDbConnection" /> object associated with the transaction.</summary>
      <returns>The <see cref="T:System.Data.IDbConnection" /> object associated with the transaction.</returns>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicTransaction.Dispose">
      <summary>Releases the unmanaged resources used by the <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicTransaction" />.</summary>
    </member>
    <member name="P:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicTransaction.IsolationLevel">
      <summary>Gets the <see cref="T:System.Data.IsolationLevel" /> for this transaction.</summary>
      <returns>The <see cref="T:System.Data.IsolationLevel" /> for this transaction.</returns>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicTransaction.Rollback">
      <summary>Rolls back a transaction from a pending state.</summary>
    </member>
    <member name="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.ChangeStates">
      <summary>Enumerates all data change states that custom business logic can handle during synchronization.</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Replication.BusinessLogicSupport.ChangeStates.CommitsToDestination">
      <summary>When changes are committed to the destination database.</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Replication.BusinessLogicSupport.ChangeStates.PublisherDeleteErrors">
      <summary>When an error occurs while propagating a DELETE statement from the Publisher to the Subscriber.</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Replication.BusinessLogicSupport.ChangeStates.PublisherDeletes">
      <summary>When a DELETE statement at the Publisher is applied at the Subscriber.</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Replication.BusinessLogicSupport.ChangeStates.PublisherInsertErrors">
      <summary>When an error occurs while propagating an INSERT statement from the Publisher to the Subscriber.</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Replication.BusinessLogicSupport.ChangeStates.PublisherInserts">
      <summary>When an INSERT statement at the Publisher is applied at the Subscriber.</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Replication.BusinessLogicSupport.ChangeStates.PublisherUpdateErrors">
      <summary>When an error occurs while propagating an UPDATE statement from the Publisher to the Subscriber.</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Replication.BusinessLogicSupport.ChangeStates.PublisherUpdates">
      <summary>When an UPDATE statement at the Publisher is applied at the Subscriber.</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Replication.BusinessLogicSupport.ChangeStates.PublisherUpdateSubscriberDeleteConflicts">
      <summary>When an UPDATE statement at the Publisher conflicts with a DELETE statement at the Subscriber.</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Replication.BusinessLogicSupport.ChangeStates.SubscriberDeleteErrors">
      <summary>When an error occurs while propagating a DELETE statement from the Subscriber to the Publisher.</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Replication.BusinessLogicSupport.ChangeStates.SubscriberDeletes">
      <summary>When a DELETE statement at the Subscriber is applied at the Publisher.</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Replication.BusinessLogicSupport.ChangeStates.SubscriberInsertErrors">
      <summary>When an error occurs while propagating an INSERT statement from the Subscriber to the Publisher.</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Replication.BusinessLogicSupport.ChangeStates.SubscriberInserts">
      <summary>When an INSERT statement at the Subscriber is applied at the Publisher.</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Replication.BusinessLogicSupport.ChangeStates.SubscriberUpdateErrors">
      <summary>When an error occurs while propagating an UPDATE statement from the Subscriber to the Publisher.</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Replication.BusinessLogicSupport.ChangeStates.SubscriberUpdatePublisherDeleteConflicts">
      <summary>When an UPDATE statement at the Subscriber conflicts with a DELETE statement at the Publisher.</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Replication.BusinessLogicSupport.ChangeStates.SubscriberUpdates">
      <summary>When an UPDATE statement at the Subscriber is applied at the Publisher.</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Replication.BusinessLogicSupport.ChangeStates.UpdateConflicts">
      <summary>When an UPDATE statement at the Publisher conflicts with an UPDATE statement at the Subscriber.</summary>
    </member>
    <member name="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.ConflictLogType">
      <summary>Enumerates the supported conflict logging options available to a conflict handler.</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Replication.BusinessLogicSupport.ConflictLogType.ConflictLogNone">
      <summary>The conflict is not logged.</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Replication.BusinessLogicSupport.ConflictLogType.ConflictLogPublisher">
      <summary>The Publisher's dataset is logged as the conflict loser.</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Replication.BusinessLogicSupport.ConflictLogType.ConflictLogSubscriber">
      <summary>The Subscriber's dataset is logged as the conflict loser.</summary>
    </member>
    <member name="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.ErrorLogType">
      <summary>Enumerates the supported error logging options available.</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Replication.BusinessLogicSupport.ErrorLogType.ErrorLogCustom">
      <summary>The custom error information is logged.</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Replication.BusinessLogicSupport.ErrorLogType.ErrorLogNone">
      <summary>The error is not logged.</summary>
    </member>
    <member name="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.IBusinessLogicResolver">
      <summary>Represents a business logic resolver.</summary>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.IBusinessLogicResolver.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicResolver" /> class.</summary>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.IBusinessLogicResolver.Dispose">
      <summary>Releases the resources used by the <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicResolver" /> class.</summary>
    </member>
    <member name="P:Microsoft.SqlServer.Replication.BusinessLogicSupport.IBusinessLogicResolver.HandledChangeStates">
      <summary>Gets the information on the types of changes handled by the <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicResolver" />.</summary>
      <returns>A <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.ChangeStates" /> that enumerates the types of changes handled by the <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.BusinessLogicResolver" />.</returns>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.IBusinessLogicResolver.InvokeChangeHandler(Microsoft.SqlServer.Replication.BusinessLogicSupport.ChangeStates,System.String,Microsoft.SqlServer.Replication.BusinessLogicSupport.SourceIdentifier,System.Data.DataSet,System.Data.DataSet@,System.Int32@,System.String@)">
      <summary>Invokes a handler when changes to the method are detected.</summary>
      <returns>The <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.ActionOnDataChange" /> that will be taken by the process after the custom business logic has executed.</returns>
      <param name="currentChangeState">The current change state.</param>
      <param name="methodName">The method name.</param>
      <param name="sourceIdentifier">The source identifier.</param>
      <param name="sourceDataSet">The source data set.</param>
      <param name="customDataSet">The custom data set.</param>
      <param name="logLevel">The log level</param>
      <param name="logMessage">The log message.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.IBusinessLogicResolver.InvokeCommitHandler(Microsoft.SqlServer.Replication.BusinessLogicSupport.SourceIdentifier,System.Guid)">
      <summary>Invokes a handler when a data change is committed during synchronization.</summary>
      <param name="sourceIdentifier">The source identifier.</param>
      <param name="rowGuid">The row GUID that was committed.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.IBusinessLogicResolver.InvokeDeleteHandler(Microsoft.SqlServer.Replication.BusinessLogicSupport.ChangeStates,System.String,Microsoft.SqlServer.Replication.BusinessLogicSupport.SourceIdentifier,System.Data.DataSet,System.Int32@,System.String@)">
      <summary>Invokes a handler when DELETE statements are being uploaded or downloaded.</summary>
      <returns>The <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.ActionOnDataDelete" /> that will be taken by the process after the custom business logic has executed.</returns>
      <param name="currentChangeState">The current change state.</param>
      <param name="methodName">The method name.</param>
      <param name="sourceIdentifier">The source identifier.</param>
      <param name="sourceDataSet">The source data set.</param>
      <param name="logLevel">The log level</param>
      <param name="logMessage">The log message.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.IBusinessLogicResolver.InvokeErrorHandler(Microsoft.SqlServer.Replication.BusinessLogicSupport.ChangeStates,System.String,Microsoft.SqlServer.Replication.BusinessLogicSupport.SourceIdentifier,System.Data.DataSet,Microsoft.SqlServer.Replication.BusinessLogicSupport.ErrorLogType@,System.String@,System.Int32,System.String,System.Int32@,System.String@)">
      <summary>Invokes a handler when error occurs during execution.</summary>
      <returns>The <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.ActionOnDataError" /> action that will be taken by the process after the business logic handler has executed.</returns>
      <param name="currentChangeState">The current change state.</param>
      <param name="methodName">The method name.</param>
      <param name="sourceIdentifier">The source identifier.</param>
      <param name="sourceDataSet">The source data set.</param>
      <param name="logErrorType">Controls how replication logs the error.</param>
      <param name="errorLogMessage">The error log message.</param>
      <param name="errorCode">The error code.</param>
      <param name="errorMessage">The error message.</param>
      <param name="logLevel">The log level of the message returned by the business logic handler.</param>
      <param name="logMessage">The log message provided by the business logic handler.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.IBusinessLogicResolver.InvokeInitialize(System.String,System.String,System.String,System.String,System.String,System.String)">
      <summary>Invokes the initialization.</summary>
      <param name="publisher">The name of the publisher.</param>
      <param name="subscriber">The name of the subscriber.</param>
      <param name="distributor">The name of the distributor.</param>
      <param name="publisherDB">The name of the publication database.</param>
      <param name="subscriberDB">The name of the subscription database.</param>
      <param name="articleName">The name of the published article.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.IBusinessLogicResolver.InvokePhaseBegin(System.Boolean)">
      <summary>Invokes the beginning of an upload or download phase of the synchronization.</summary>
      <param name="download">Specifies whether the phase about to begin is an upload or download.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.IBusinessLogicResolver.InvokeUpdateConflictHandler(Microsoft.SqlServer.Replication.BusinessLogicSupport.ChangeStates,System.String,System.Data.DataSet,System.Data.DataSet,System.Data.DataSet@,Microsoft.SqlServer.Replication.BusinessLogicSupport.SourceIdentifier,Microsoft.SqlServer.Replication.BusinessLogicSupport.ConflictLogType@,System.String@,System.Int32@,System.String@)">
      <summary>Invokes the handler when conflicting UPDATE statements occur at the source and at the destination.</summary>
      <returns>The <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.ActionOnUpdateConflict" /> action that will be taken by the process after the custom business logic handler has executed.</returns>
      <param name="currentChangeState">Current change state.</param>
      <param name="methodName">The method name.</param>
      <param name="sourceDataSet">The source data set.</param>
      <param name="destinationDataSet">The destination data set.</param>
      <param name="customDataSet">Data set implemented by the custom business logic.</param>
      <param name="sourceIdentifier">The source identifier.</param>
      <param name="logConflictType">The log conflict type.</param>
      <param name="conflictLogMessage">The conflict log message.</param>
      <param name="logLevel">The log level</param>
      <param name="logMessage">The log message.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.IBusinessLogicResolver.InvokeUpdateDeleteConflictHandler(Microsoft.SqlServer.Replication.BusinessLogicSupport.ChangeStates,System.String,Microsoft.SqlServer.Replication.BusinessLogicSupport.SourceIdentifier,System.Data.DataSet,System.Data.DataSet,System.Data.DataSet@,System.Boolean,Microsoft.SqlServer.Replication.BusinessLogicSupport.ConflictLogType@,System.String@,System.Int32@,System.String@)">
      <summary>Invokes a handler when UPDATE statements conflict with DELETE statements at the source and at the destination.</summary>
      <returns>The <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.ActionOnUpdateDeleteConflict" /> action that will be taken by the process after the custom business logic handler has executed.</returns>
      <param name="currentChangeState">Current change state.</param>
      <param name="methodName">The method name.</param>
      <param name="sourceIdentifier">The source identifier.</param>
      <param name="sourceDataSet">The source data set.</param>
      <param name="destinationDataSet">The destination data set.</param>
      <param name="customDataSet">Data set implemented by the custom business logic.</param>
      <param name="downloadPhase">Specifies whether the phase about to begin is an upload or download.</param>
      <param name="logConflictType">The log conflict type.</param>
      <param name="conflictLogMessage">The conflict log message.</param>
      <param name="logLevel">The log level</param>
      <param name="logMessage">The log message.</param>
    </member>
    <member name="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.SourceIdentifier">
      <summary>Enumerates all sources of a data change.</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Replication.BusinessLogicSupport.SourceIdentifier.SourceIsPublisher">
      <summary>Data change occurred at the Publisher.</summary>
    </member>
    <member name="F:Microsoft.SqlServer.Replication.BusinessLogicSupport.SourceIdentifier.SourceIsSubscriber">
      <summary>Data change occurred at the Subscriber.</summary>
    </member>
    <member name="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.TempDB">
      <summary>Represents a temporary database.</summary>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.TempDB.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.TempDB" /> class.</summary>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.TempDB.CreateResultSet(System.Int32,System.Int32)">
      <summary>Creates a temporary database result set.</summary>
      <returns>A temporary database result set.</returns>
      <param name="numCols">The number of columns.</param>
      <param name="numRows">The number of rows.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.TempDB.Execute(Microsoft.SqlServer.Replication.BusinessLogicSupport.TempDBResultSet@)">
      <summary>Executes database command.</summary>
      <param name="resultSet">The result set.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.TempDB.FillColumnData(Microsoft.SqlServer.Replication.BusinessLogicSupport.TempDBResultSet,System.Int32,System.Int32,System.Object)">
      <summary>Fills column data with a specified result set.</summary>
      <param name="resultSet">The result set.</param>
      <param name="rowId">The row identifier.</param>
      <param name="colId">The column identifier.</param>
      <param name="columnData">The column data.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.TempDB.FillColumnMetadata(Microsoft.SqlServer.Replication.BusinessLogicSupport.TempDBResultSet,System.Int32,System.String,System.Type,System.Int32)">
      <summary>Fills column metadata with a specified result set.</summary>
      <param name="resultSet">The result set.</param>
      <param name="index">The index.</param>
      <param name="name">The name of the database.</param>
      <param name="type">The type of database.</param>
      <param name="maxSize">The maximum size of the database.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.TempDB.ResultSetCreate(System.Int32,System.Int32)">
      <summary>Creates result set.</summary>
      <returns>A <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.TempDBResultSet" /> object.</returns>
      <param name="numCols">The number of columns.</param>
      <param name="numRows">The number of rows.</param>
    </member>
    <member name="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.TempDBMetaData">
      <summary>Represents a temporary database metadata.</summary>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.TempDBMetaData.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.TempDBMetaData" /> class.</summary>
    </member>
    <member name="P:Microsoft.SqlServer.Replication.BusinessLogicSupport.TempDBMetaData.MaxSize">
      <summary>Gets or sets the maximum database size.</summary>
      <returns>The maximum size of the database.</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Replication.BusinessLogicSupport.TempDBMetaData.Name">
      <summary>Gets or sets the name of the database.</summary>
      <returns>The name of the database.</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Replication.BusinessLogicSupport.TempDBMetaData.Type">
      <summary>Gets or sets the database type.</summary>
      <returns>The database type.</returns>
    </member>
    <member name="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.TempDBResultSet">
      <summary>Represents a temporary database result set.</summary>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.TempDBResultSet.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.TempDBResultSet" /> class.</summary>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.TempDBResultSet.GetColumnData(System.Int32,System.Int32)">
      <summary>Gets the column data from the database.</summary>
      <returns>The column data from the database.</returns>
      <param name="rowNumber">The row number.</param>
      <param name="colNumber">The column number.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.TempDBResultSet.GetColumnInfo(System.Int32)">
      <summary>Gets the column info from the database.</summary>
      <returns>The <see cref="T:Microsoft.SqlServer.Replication.BusinessLogicSupport.TempDBMetaData" /> object.</returns>
      <param name="index">The index.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.TempDBResultSet.InitializeColumnData(System.Int32,System.Int32)">
      <summary>Initializes the column data.</summary>
      <param name="numRows">The number of rows.</param>
      <param name="numCols">The number of columns.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.TempDBResultSet.InitializeColumnInfo(System.Int32)">
      <summary>Initializes the column information.</summary>
      <param name="numCols">The number of columns.</param>
    </member>
    <member name="P:Microsoft.SqlServer.Replication.BusinessLogicSupport.TempDBResultSet.NumOfColumns">
      <summary>Gets the number of columns in the database.</summary>
      <returns>The number of columns in the database.</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Replication.BusinessLogicSupport.TempDBResultSet.NumOfRows">
      <summary>Gets the number of rows in the database.</summary>
      <returns>The number of rows in the database.</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Replication.BusinessLogicSupport.TempDBResultSet.RecordsAffected">
      <summary>Gets or sets the number of records affected.</summary>
      <returns>The number of records affected.</returns>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.TempDBResultSet.SetColumnData(System.Int32,System.Int32,System.Object)">
      <summary>Sets the data for a specified column.</summary>
      <param name="rowIndex">The row index.</param>
      <param name="colIndex">The column index.</param>
      <param name="columnData">The column data.</param>
    </member>
    <member name="M:Microsoft.SqlServer.Replication.BusinessLogicSupport.TempDBResultSet.SetColumnInfo(System.Int32,System.String,System.Type,System.Int32)">
      <summary>Set the information for a specified column.</summary>
      <param name="index">The index.</param>
      <param name="name">The name of the information.</param>
      <param name="type">The type of information.</param>
      <param name="maxSize">The maximum size of the information.</param>
    </member>
  </members>
</doc>